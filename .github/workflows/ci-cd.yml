name: CI/CD - Build, Test, Release & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Permissions for creating releases and deploying to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "ci-cd"
  cancel-in-progress: false

jobs:
  version:
    name: Generate Version Number
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version from run number
      id: version
      run: |
        # Read base version from package.json (e.g., "1.0.0")
        BASE_VERSION=$(node -p "require('./package.json').version")
        # Extract major.minor (e.g., "1.0")
        MAJOR_MINOR=$(echo $BASE_VERSION | cut -d. -f1-2)
        # Use GitHub run number as patch version
        VERSION="${MAJOR_MINOR}.${{ github.run_number }}"
        TAG="v${VERSION}"

        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"

  build:
    name: Build macOS App
    runs-on: macos-latest
    needs: version

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update version in package.json
      run: npm version ${{ needs.version.outputs.version }} --no-git-tag-version

    - name: Build macOS app
      run: npm run build:mac -- --publish never
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Upload macOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.dmg
          dist/*.zip
        retention-days: 90

  test:
    name: Run All Tests
    runs-on: macos-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload test results for dashboard
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results/
        retention-days: 90

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        name: Sunnyscreen ${{ needs.version.outputs.tag }}
        body: |
          ## Sunnyscreen ${{ needs.version.outputs.version }}

          Automated release from commit ${{ github.sha }}

          ### Downloads

          - **macOS**: Download the `.dmg` file below

          ### Installation

          Since this app is not signed with an Apple Developer certificate, you'll need to bypass Gatekeeper:

          **Option 1:** Right-click the app and select "Open" (instead of double-clicking)

          **Option 2:** Run this command in Terminal:
          ```bash
          xattr -cr "/Applications/Sunrise Alarm.app"
          ```

          ---

          ðŸ¤– Built and released automatically via CI/CD
        files: |
          dist/*.dmg
          dist/*.zip
        draft: false
        prerelease: false

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [version, test]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: test-results/

    - name: Create videos manifest
      run: |
        # Create videos.json manifest for test dashboard
        mkdir -p tests/test-results/playwright-output

        # Copy test results
        cp -r test-results/* tests/test-results/ 2>/dev/null || true

        # Generate videos.json
        cat > tests/test-results/videos.json << 'EOF'
        []
        EOF

        # If videos exist, create proper manifest
        if [ -d "test-results/playwright-output" ] && [ "$(ls -A test-results/playwright-output/*.webm 2>/dev/null)" ]; then
          echo "[" > tests/test-results/videos.json
          first=true
          for video in test-results/playwright-output/*.webm; do
            if [ -f "$video" ]; then
              filename=$(basename "$video")
              name=$(echo "$filename" | sed 's/.webm$//' | sed 's/-/ /g')
              [ "$first" = false ] && echo "," >> tests/test-results/videos.json
              echo "  {\"name\": \"$name\", \"file\": \"$filename\"}" >> tests/test-results/videos.json
              first=false
            fi
          done
          echo "]" >> tests/test-results/videos.json
        fi

    - name: Create deployment directory
      run: |
        mkdir -p _site

        # Copy homepage and assets
        cp index.html _site/
        cp icon.png _site/

        # Copy tests directory with results
        cp -r tests _site/

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  validate-deployment:
    name: Validate Deployed Site
    runs-on: ubuntu-latest
    needs: deploy-pages

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Wait for deployment to be ready
      run: |
        echo "Waiting 30 seconds for GitHub Pages to fully deploy..."
        sleep 30

    - name: Run post-deployment tests
      run: npm run test:e2e:deployed

    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: post-deployment-test-results
        path: test-results/
        retention-days: 30
